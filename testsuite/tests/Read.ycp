/**
 *  Read.ycp
 *  Test of Kerberos::Read function (whole read process, many config files)
 *  Author:	Jiri Suchomel <jsuchome@suse.cz>
 *  $Id$
 */

{

    // testedfiles: Kerberos.ycp Pam.ycp
    import "Testsuite";
    import "Kerberos";

    map READ = $[
	"etc": $[
	    // /etc/krb5.conf
	    "krb5_conf" : $[
		"v" : $[
		    "libdefaults": $[
			"default_realm": ["SUSE.CZ"],
			"clockskew": ["500"]
		    ],
		    "SUSE.CZ": $[
			"kdc": ["chimera.suse.cz", "kdc.suse.cz"],
			"admin_server": nil,
			"default_domain": nil,
		    ],
		    "pam" : $[
			"minimum_uid": ["1"],
			"renew_lifetime": nil,
			"ticket_lifetime": nil,
			"forwardable": nil,
			"proxiable": nil,
			"retain_after_close": nil,
			"use_shmem"	: [""],
			"use_authtok"		: nil,
		    ],
		    "pkinit" : $[
			"trusted_servers": nil,
		    ]
		],
	    ],
	    // /etc/security/pam_*
	    "security": $[
		"section": $[
		    "/etc/security/pam_unix2.conf": $[],
		    "/etc/security/pam_pwcheck.conf": $[]
		],
		"v": $[
		    "/etc/security/pam_unix2.conf": $[
			"passwd" : "nullok use_ldap",
			"auth"	: "nullok use_krb5"
		    ],
		]
	    ],
	    // /etc/ssh/ssh_config
	    "ssh" : $[
		"ssh_config": $[
		    "s": $[
			"*": $[]
		    ],
		    "v": $[
			"*": $[
			    "GSSAPIAuthentication" : "yes",
			    "GSSAPIDelegateCredentials": "yes"
			]
		    ],
		]
	    ],
	],
	"sysconfig": $[
	    "openafs-client": nil
	],
	"target": $[
	    "stat": $[ 1:2 ]
	]
    ];

    map EX = $[
	"target": $[
	    "bash": 0,
	    "bash_output": $[
// call of ypdomainname
//		"stdout" : "suse.cz"
// call of pam-config
		"stdout" : "password: "
	    ]
	]
    ];

    Testsuite::Dump ("==== reading... ============================");

    Testsuite::Test(``(Kerberos::Read ()), [ READ, $[], EX ], 0);

    Testsuite::Dump ("============================================");

    Testsuite::Dump ( sformat ("kerberos used: %1", Kerberos::use_pam_krb) );

    Testsuite::Dump ( sformat ("default realm: %1", Kerberos::default_realm) );
    Testsuite::Dump ( sformat ("kdc: %1", Kerberos::kdc) );

    Testsuite::Dump ( sformat ("\nssh support: %1", Kerberos::ssh_support) );
    Testsuite::Dump ("============================================");

//    READ ["etc", "krb5_conf", "v", "libdefaults", "default_realm"]	= nil;
    READ ["target", "stat"]						= $[];

    Testsuite::Dump ("==== reading... ============================");

    Testsuite::Test(``(Kerberos::Read ()), [ READ, $[], EX ], 0);

    Testsuite::Dump (sformat ("default realm: %1", Kerberos::default_realm) );

    Testsuite::Dump ("============================================");


}
