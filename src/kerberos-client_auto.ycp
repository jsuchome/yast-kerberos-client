/**
 * File:	clients/kerberos-client_auto.ycp
 * Package:	Configuration of kerberos-client
 * Summary:	Client for autoinstallation
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param first a map of kerberos-client settings
 * @return map edited settings or an empty map if canceled
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = WFM::CallModule ("kerberos-client_auto", [ mm ]);
 */

{

textdomain "kerberos";

y2milestone("----------------------------------------");
y2milestone("Kerberos-client auto started");

import "Kerberos";
include "kerberos-client/wizards.ycp";

any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if(size(Args()) > 0 && is(Args(0), string)) {
    func = WFM::Args(0);
    if(size(Args()) > 1 && is(Args(1), map))
	param = WFM::Args(1);
}
y2debug("func=%1", func);
y2debug("param=%1", param);


/* create a  summary*/
if(func == "Import") {
    ret = Kerberos::Import(param);
}
/* create a  summary*/
else if(func == "Summary") {
    ret = select(Kerberos::Summary(),0, "");
}
else if (func == "Reset") {
    Kerberos::Import($[]);
	ret =  $[];
}
else if (func == "Change") {
    ret = KerberosAutoSequence();
}
else if (func == "Read") {
    ret = Kerberos::Read();
}
else if (func == "Export") {
    ret = Kerberos::Export();
}
else if (func == "Write") {
	Kerberos::write_only = true;
	ret = Kerberos::Write();
}
else if (func == "Packages") {
        ret = Kerberos::required_packages;
}
/* unknown function */
else {
    y2error("unknown function: %1", func);
    ret = false;
}

y2debug("ret=%1", ret);
y2milestone("Kerberos-client auto finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
