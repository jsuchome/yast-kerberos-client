/**
 * File:	modules/Kerberos-client.ycp
 * Package:	Configuration of kerberos-client
 * Summary:	Data for configuration of kerberos-client, i/o functions.
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of kerberos-client.
 * Input and output routines.
 */

{

module "Kerberos";
textdomain "kerberos";

import "Summary";

/**
 * Abort function
 * return boolean return true if abort
 */
global block AbortFunction = nil;


global boolean proposal_valid = false;
global boolean write_only = false;

// if pam_krb5 module is used for login
global boolean use_pam_krb = false;

// required/optional/sufficient
global string control = "";
string saved_control = "";

// argumets to pam module
global string arguments = "";

// default realm name
global string default_realm = "";

// adress of KDC (key distribution centre) server for default realm
global string kdc = "";

global string clockskew = "";

global boolean pam_modified = false;

/**
 * Data was modified?
 * @return true if modified
 */
global define boolean Modified() ``{
    y2debug("modified=%1",modified);
    return modified;
};


/**
 * Get all the Kerberos configuration from a map.
 * @return	success
 */
global define boolean Import (map settings) ``{
	return true;
}

/**
 * Only set variables, without checking anything
 * @return: void
 */
global define void Set(map settings)  ``{

	return;
}

/**
 * Dump the Kerberos settings to a map, for autoinstallation use.
 */
global define map Export () ``{
	return $[];
}

/**
 * Reads Kerberos settings from the SCR
 * @return success
 */
global define boolean Read () ``{

    // first, read the pam settings
    // currently, only /etc/pam.d/login is checked
    list pam_login = SCR::Read(.pam.login);
    foreach (`line, pam_login, ``{
        if ( line["type"]:"" == "auth" &&
             issubstring (line["module"]:"", "pam_krb5.so"))
        {
            use_pam_krb = true;
            // only the first is taken
            if (control == "")
                control = line["control"]:"";
            if (arguments == "")
                arguments = line["arguments"]:"";
        }
    });

    saved_control = control;

    // now read the settings from /etc/krb5.conf
    if (SCR::Execute (.target.bash, "/usr/bin/test -e /etc/krb5.conf") == 0)
    {
        y2debug("krb5.conf sections: %1", SCR::Dir(.etc.krb5_conf.s));

        default_realm = ReadString (.etc.krb5_conf.v.libdefaults.default_realm);

        clockskew = ReadString (.etc.krb5_conf.v.libdefaults.clockskew);

        kdc = ReadString ( add ( add (.etc.krb5_conf.v, default_realm), "kdc"));
    }
    else
        SCR::Execute (.target.bash, sformat("/usr/bin/touch /etc/krb5.conf"));

    return true;
}

/**
 * Saves Kerberos configuration.
 * (No parameters because it is too short to abort)
 * @return true on success
 */
global define boolean Write (boolean writeonly) ``{

    boolean pam_installed = false;
    boolean ret = true;
    list pam_files = ["login", "xlock", "xdm"];

    // -- pam settings
    if (pam_modified)
    {
        if (use_pam_krb)
        {
            if (SCR::Execute(.target.bash, "rpm -q pam_krb5") ==0)
               pam_installed = true;
            else
            {
                // Popup text (required application):
                if (UI::YesNoPopup(_("To configure PAM autentification with Kerberos,
the package \"pam_krb5\" is necessary.
Install this package now?")))
                {
                    include "require.ycp"; // is it possible to have it here??
                    pam_installed = DoInstallAndRemove(["pam_krb5"], []);
                }
            }
            if (pam_installed)
            {
                // -- write to /etc/pam.d/*
                UpdatePamFiles (pam_files);
            }
            else
                // instalation not succesful ?
                ret = false;
        }
        else
        {
            UpdatePamFiles (pam_files);
        }
    }

    // -- write to /etc/krb5.conf

    // change the default realm name
    SCR::Write(.etc.krb5_conf.v.libdefaults.default_realm, default_realm);

    if (contains (SCR::Dir(.etc.krb5_conf.s), default_realm))
    {
        // update the default realm settings
        SCR::Write(
            add (add (.etc.krb5_conf.v, default_realm), "kdc"), kdc);
    }
    else
    {
        // specify the type of this subsection
        SCR::Write( add (.etc.krb5_conf.st.realms, default_realm), 1);
        // write the settings of the new default realm
        SCR::Write(
            add (add (.etc.krb5_conf.v.realms, default_realm), "kdc"), kdc);
    }

    return ret;
}

global define string ReadString (path path_to_value) ``{

    string value = SCR::Read (path_to_value);
    if (value == nil)
        value = "";

    return value;
}

global define string ReadFile (string name) ``{

    string ret = SCR::Read (.target.string, "/etc/pam.d/" + name);

    if (findlastof (ret, "\n") < size (ret) - 1)
        ret = ret + "\n";
//    y2milestone ("file /etc/pam.d/%1: %2", name, ret);
    return ret;

}

/*
 * Removes the old module used from authentication from pam file
 * @param file contens
 * @param old_module name of old module
 */
define string RemoveOldEntry (string file, string old_module) ``{

    list file_list = splitstring (file, "\n");
    file_list = filter (`entry, file_list, ``{
        if (findfirstof (entry, "#") != 0 &&
            issubstring (entry, "auth") &&
            issubstring (entry, old_module))
            return false;
        else return true;
    });

    file = mergestring (file_list, "\n");
    return file;
}

global define boolean UpdatePamFiles (list files) ``{

    foreach (`filename, files, ``{

        string content = ReadFile(filename);
        string file_path = "/etc/pam.d/" + filename;
        path unix2_path = add( add( add (.pam, filename), "auth"), "pam_unix2");

        if ((saved_control != "" && saved_control != control) ||
             !use_pam_krb)
        {
            // remove the previously used entry
            content = RemoveOldEntry (content, "pam_krb5.so");
        }

        if (use_pam_krb)
        {
            // add the new entry is:
            string entry = "auth " + control + " pam_krb5.so missing_keytab_ok";
            if (control == "sufficient")
            {
                //sufficient - 1st line
                content = entry + "\n" + content;
                SCR::Write (.target.string, file_path, content);
                // change params for pam_unix
                SCR::Write (unix2_path, "+use_first_pass");
            }
            else if (control == "optional")
            {
                entry = entry + " try_first_pass";
                //optional - last line
                content = content + entry;
                SCR::Write (.target.string, file_path, content);
                // change params for pam_unix
                SCR::Write (unix2_path, "-use_first_pass");
            }
            else if (control == "required")
            {
                // remove pam_unix2 - only kerberos authentication
                // will be possible !!
                content = RemoveOldEntry (content, "pam_unix2.so");
                content = entry + "\n" + content;
                SCR::Write (.target.string, file_path, content);
            }
        }
        else
        {
            // remove pam_krb5 from /etc/pam.d
            SCR::Write (.target.string, file_path, content);
        }
    });
}



/**
 * Create a textual summary
 * @param split split configured and unconfigured?
 * @return summary of the current configuration
 */
global define list Summary() ``{
    return [ _("Configuration summary ..."), [] ];
}

/**
 * Create an overview table
 * @return table items
 */
global define list Overview() ``{
    // TODO FIXME: your code here...
    return [];
}

/* EOF */
}
