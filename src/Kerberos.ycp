/**
 * File:	modules/Kerberos.ycp
 * Package:	Configuration of kerberos-client
 * Summary:	Data for configuration of kerberos-client, i/o functions.
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of kerberos-client.
 * Input and output routines.
 */

{

module "Kerberos";
textdomain "kerberos";

import "Summary";


//global boolean proposal_valid = false;
global boolean write_only = false;

// if pam_krb5 module is used for login
global boolean use_pam_krb = false;

// if pam_unix is in /etc/pam.d/login
boolean pam_unix_present = false;

// required/optional/sufficient
global string control = "";
string saved_control = "";

// argumets to pam module
global string arguments = "";

// default realm and domain name
global string default_realm = "";
global string default_domain = "";


// adress of KDC (key distribution centre) server for default realm
global string kdc = "";

global string clockskew = "300";

global boolean pam_modified = false;

/**
 * Data was modified?
 * @return true if modified
 */
global define boolean Modified() ``{
    y2debug("modified=%1",modified);
    return modified;
};


/**
 * Get all the Kerberos configuration from a map.
 * @param settings imported map
 * @return	success
 */
global define boolean Import (map settings) ``{
    use_pam_krb = settings["pam_login", "use_kerberos"]:false;
    control	= settings["pam_login", "authentication_mode"]:"";
    default_domain = settings["kerberos_client", "default_domain"]:"";
    default_realm = settings["kerberos_client", "default_realm"]:"";
    kdc = settings["kerberos_client", "kdc_server"]:"";
    clockskew = settings["kerberos_client", "clockskew"]:clockskew;

    return true;
}


/**
 * Dump the Kerberos settings to a map, for autoinstallation use.
 * @return map with settings
 */
global define map Export () ``{

    return $[
	     "pam_login":   $[
				  "use_kerberos"        : use_pam_krb,
				  "authentication_mode"	: control
	     ],
	     "kerberos_client":	$[
				  "default_domain"		: default_domain,
				  "default_realm"		: default_realm,
				  "kdc_server"			: kdc,
                  "clockskew"           : clockskew
	     ]
    ];
}

/**
 * Reads Kerberos settings from the SCR
 * @return success
 */
global define boolean Read () ``{

    // first, read the pam settings
    // currently, only /etc/pam.d/login is checked
    list pam_login = SCR::Read(.pam.login);
    foreach (`line, pam_login, ``{
        if ( line["type"]:"" == "auth" )
        {
            if (issubstring (line["module"]:"", "pam_unix"))
                pam_unix_present = true;
            if (issubstring (line["module"]:"", "pam_krb5.so"))
            {
                use_pam_krb = true;
                // only the first is taken
                if (control == "")
                    control = line["control"]:"";
                if (arguments == "")
                    arguments = line["arguments"]:"";
            }
        }
    });

    saved_control = control;

    // now read the settings from /etc/krb5.conf
    if (FileExists ("/etc/krb5.conf"))
    {
        y2debug("krb5.conf sections: %1", SCR::Dir(.etc.krb5_conf.s));

        default_realm = ReadFile (.etc.krb5_conf.v.libdefaults.default_realm);

        clockskew = ReadFile (.etc.krb5_conf.v.libdefaults.clockskew);

        kdc = ReadFile ( add ( add (.etc.krb5_conf.v, default_realm), "kdc"));

        default_domain = ReadFile ( add ( add (.etc.krb5_conf.v,
            default_realm), "default_domain"));
    }
    else
        SCR::Execute (.target.bash, sformat("/usr/bin/touch /etc/krb5.conf"));

    // propose some good values, if there are install defaults
    // what if user _wants_ to have MY.REALM?
    if (default_domain == "" && FileExists ("/bin/ypdomainname"))
    {
        map yp_domain = SCR::Execute (.target.bash_output, "/bin/ypdomainname");
        default_domain = yp_domain["stdout"]:"\n";
        default_domain = substring (default_domain, 0, size(default_domain)-1);
    }

    if ((default_realm == "" || default_realm == "MY.REALM") &&
        default_domain != "")
    {
        default_realm = toupper (default_domain);
    }
    if ((kdc == "" || kdc == "MY.COMPUTER") && FileExists ("/usr/bin/ypwhich"))
    {
        map yp_serv = SCR::Execute (.target.bash_output, "/usr/bin/ypwhich");
        kdc = yp_serv["stdout"]:"\n";
        kdc = substring (kdc,0 , size(kdc) - 1);
    }

    return true;
}


/**
 * Saves Kerberos configuration.
 * (No parameters because it is too short to abort)
 * @return true on success
 */
global define boolean Write () ``{

    boolean pam_installed = false;
    boolean ret = true;
    list pam_files = ["login", "xlock", "xdm"];

    // -- pam settings
    if (pam_modified || write_only)
    {
        if (use_pam_krb)
        {
	    // In autoinst mode  we install needed packages in initial mode
            if (SCR::Execute(.target.bash, "rpm -q pam_krb5") ==0 || write_only)
               pam_installed = true;
            else
            {
                // Popup text (required application):
                if (UI::YesNoPopup(_("To configure PAM autentification with Kerberos,
the package \"pam_krb5\" is necessary.
Install this package now?")))
                {
                    include "require.ycp"; // is it possible to have it here??
                    pam_installed = DoInstallAndRemove(["pam_krb5"], []);
                }
            }
            if (pam_installed)
            {
                // -- write to /etc/pam.d/*
                UpdatePamFiles (pam_files);
            }
            else
                // instalation not succesful ?
                ret = false;
        }
        else
        {
            UpdatePamFiles (pam_files);
        }
    }

    // -- write to /etc/krb5.conf

    // change the default realm name
    SCR::Write(.etc.krb5_conf.v.libdefaults.default_realm, default_realm);

    // write the mapping domain-realm
    if (default_domain != "")
    {
        string domain = default_domain;
        if ( findfirstof (domain, ".") != 0)
            domain = "." + domain;
        SCR::Write( add (.etc.krb5_conf.v.domain_realm, domain), default_realm);
    }

    if (clockskew != "")
        SCR::Write(.etc.krb5_conf.v.libdefaults.clockskew, clockskew);

    if (contains (SCR::Dir(.etc.krb5_conf.s), default_realm))
    {
        // update the default realm settings
        SCR::Write( add (add (.etc.krb5_conf.v, default_realm), "kdc"), kdc);
        if (default_domain != "")
            SCR::Write( add (add (.etc.krb5_conf.v, default_realm),
                "default_domain"), default_domain);
    }
    else
    {
        // specify the type of this subsection
        SCR::Write( add (.etc.krb5_conf.st.realms, default_realm), 1);
        // write the settings of the new default realm
        SCR::Write(
            add (add (.etc.krb5_conf.v.realms, default_realm), "kdc"), kdc);
        if (default_domain != "")
            SCR::Write( add (add (.etc.krb5_conf.v.realms, default_realm),
                "default_domain"), default_domain);
    }

    return ret;
}

/**
 * Reads the item value from the /etc/krb5.conf via ini agent
 * If the item doesn't exist, returns empty string (not nil)
 * @param path_to_value path for agent (.etc.krb5_conf)
 * @return string the value
 */
global define string ReadFile (path path_to_value) ``{

    string value = SCR::Read (path_to_value);
    if (value == nil)
        value = "";

    return value;
}

/**
 * Reads the contens of pam file
 * @param name name of the file in /etc/pam.d directory
 * @return string file contens
 */
global define string ReadStringFile (string name) ``{

    string ret = SCR::Read (.target.string, "/etc/pam.d/" + name);

    if (findlastof (ret, "\n") < size (ret) - 1)
        ret = ret + "\n";
//    y2milestone ("file /etc/pam.d/%1: %2", name, ret);
    return ret;

}

/**
 * Removes the old module used from authentication from pam file
 * @param file contens
 * @param old_module name of old module
 * @return modified file contens
 */
define string RemoveOldEntry (string file, string old_module) ``{

    list file_list = splitstring (file, "\n");
    file_list = filter (`entry, file_list, ``{
        if (findfirstof (entry, "#") != 0 &&
            issubstring (entry, "auth") &&
            issubstring (entry, old_module))
            return false;
        else return true;
    });

    file = mergestring (file_list, "\n");
    return file;
}

/**
 * Change the authentication settings in the files in /etc/pam.d/
 * @param files the list of files to modificate
 * @return success
 */
global define boolean UpdatePamFiles (list files) ``{

    // TODO: better handling with pam_unix2.so
    foreach (`filename, files, ``{

        string file_path = "/etc/pam.d/" + filename;
        if (! FileExists (file_path))
            return false;
        string content = ReadStringFile(filename);
        path unix2_path = add( add( add (.pam, filename), "auth"), "pam_unix2");
        string unix2_entry = "auth requisite pam_unix2.so\tnullok";

        if ((saved_control != "" && saved_control != control) ||
             !use_pam_krb)
        {
            // remove the previously used entry
            content = RemoveOldEntry (content, "pam_krb5.so");
        }

        if (use_pam_krb)
        {
            // add the new entry is:
            string entry = "auth " + control + " pam_krb5.so missing_keytab_ok";
            if (control == "sufficient")
            {
                //sufficient - 1st line
                if (pam_unix_present)
                {
                    content = entry + "\n" + content;
                    SCR::Write (.target.string, file_path, content);
                    // change params for pam_unix
                    SCR::Write (unix2_path, "+use_first_pass");
                }
                else
                {
                    content = entry + "\n" + unix2_entry + " use_first_pass\n"
                        + content;
                    SCR::Write (.target.string, file_path, content);
                }
            }
            else if (control == "optional")
            {
                entry = entry + " try_first_pass";
                //optional - last line
                if (pam_unix_present)
                {
                    content = content + entry;
                    SCR::Write (.target.string, file_path, content);
                    // change params for pam_unix
                    SCR::Write (unix2_path, "-use_first_pass");
                }
                else
                {
                    content = unix2_entry + "\n" + content + entry;
                    SCR::Write (.target.string, file_path, content);
                }
            }
            else if (control == "required")
            {
                // remove pam_unix2 - only kerberos authentication
                // will be possible !!
                content = RemoveOldEntry (content, "pam_unix");
                content = entry + " rootok\n" + content;
                SCR::Write (.target.string, file_path, content);
            }
        }
        else
        {
            // remove pam_krb5 from /etc/pam.d
            if (!pam_unix_present)
                content = unix2_entry + "\n" + content;
            SCR::Write (.target.string, file_path, content);
        }
    });
    return true;
}


/**
 * Check for file existence
 * @param path_to_file the path
 * @return the answer
 */
global define boolean FileExists (string path_to_file) ``{

    return (SCR::Execute (.target.bash,
        sformat ("/usr/bin/test -e %1", path_to_file)) == 0);
}


/**
 * Create a textual summary
 * @return summary of the current configuration
 */
global define list Summary() ``{

    string summary = "";
    string nc = Summary::NotConfigured ();
    // summary header
    summary = Summary::AddHeader(summary, _("PAM Login"));

    summary = Summary::AddLine(summary, (use_pam_krb) ? _("Use Kerberos") : _("Do not use Kerberos"));

    summary = Summary::AddHeader(summary, _("Authentication mode"));

    summary = Summary::AddLine(summary, (control != "") ? control : nc);

    summary = Summary::AddHeader(summary, _("Default Realm"));
    summary = Summary::AddLine(summary, (default_realm != "") ? default_realm : nc);

    summary = Summary::AddHeader(summary, _("Default Domain"));
    summary = Summary::AddLine(summary, (default_domain != "") ? default_domain : nc);

    summary = Summary::AddHeader(summary, _("KDC server address"));
    summary = Summary::AddLine(summary, (kdc != "") ? kdc : nc);

    summary = Summary::AddHeader(summary, _("Clock Skew"));
    summary = Summary::AddLine(summary, (clockskew != "") ? clockskew : nc);

    return [ summary, [] ];
}

/**
 * Create an overview table
 * @return table items
 */
global define list Overview() ``{
    // TODO FIXME: your code here...
    return [];
}

/* EOF */
}
