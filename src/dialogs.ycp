/**
 * File:	include/kerberos-client/dialogs.ycp
 * Package:	Configuration of kerberos-client
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "kerberos";

import "Wizard";

import "Kerberos";
import "Report";
import "Mode";
import "Require";

import "Popup";
import "Label";

/**
 * The dialog that appears when the [Abort] button is pressed.
 * @return `abort if user really wants to abort, `back otherwise
 */
global define symbol ReallyAbort () ``{

    boolean ret = true;
    if (!Mode::cont)
    {
	ret = Popup::ReallyAbort (Kerberos::Modified());;
    }
    else
    {
	ret = Popup::ConfirmAbort (`incomplete);
    }

    if ( ret )	return `abort;
    else	return `back;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{
    boolean ret = Kerberos::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    // help text
    Wizard::RestoreHelp(_("Writing Kerberos Client Settings"));
    boolean ret = Kerberos::Write();
    return ret ? `next : `abort;
}

/**
 * Dialog for configuring Kerberos client (values in /etc/krb5.conf)
 * @return dialog result
 */
global define symbol ConfigureDialog() ``{

    // help text 1/5
    string help_text = _("<p>
<b>Authentication with Kerberos</b><br>
You can update your PAM settings to enable Kerberos authentication for your users.
</p>
") +
    // help text 2/5
    _("<p>
<b>Basic Client Settings</b><br>
Enter your <b>domain</b>, <b>default realm</b>, and the <b>host name</b> or <b>address</b> of your Key Distribution Center (KDC).</p>
") +

    // help text 3/5
    _("<p>
It is common practice to use the domain name in uppercase as your default realm name. You can select freely, however.</p>
") +

    // help text 4/5
    _("<p>If you are using Kerberos authentication together with AFS file
system, check <b>Kerberos support for AFS</b> checkbox. You have to enter an IP
address for the <b>AFS server</b>. As the name of <b>AFS cell</b>, the DNS
domain name is usually used.</p>") +

    // help text 5/5
    _("<p>To configure more settings, click <b>Advanced Settings</b> button.</p>");

    string default_realm = Kerberos::default_realm;
    string kdc = Kerberos::kdc;
    string default_domain = Kerberos::default_domain;

    string cell		= Kerberos::afs_cell;
    string afs_serverip	= Kerberos::afs_serverip;
    boolean use_afs	= Kerberos::use_afs;
    boolean use_pam_krb = Kerberos::use_pam_krb;
    boolean afs_available = true;

    list packages = Kerberos::packages;

    term con = `HBox (`HSpacing (3), `VBox (
        `VSpacing (0.5),
        `RadioButtonGroup(`id(`rd),
	    `Left(`HVSquash(`VBox (
		// radio button label
                `Left (`RadioButton(`id(`pamno), `opt (`notify), _("Do No&t Use Kerberos"), !use_pam_krb)),
		// radio button label
                `Left(`RadioButton(`id(`pamyes), `opt (`notify), _("&Use Kerberos"), use_pam_krb)))))
	),
        `VSpacing (0.5),
	// frame label
	`Frame (_("Basic Kerberos Settings"), `HBox(`HSpacing (0.5), `VBox(
	    `VSpacing (0.5),
	    `HBox(
		// textentry label
		`TextEntry (`id (`domain), _("Default &Domain"),default_domain),
		// textentry label
		`TextEntry (`id (`realm), _("Default Real&m"), default_realm)
	    ),
	    // textentry label
	    `TextEntry (`id (`kdc), _("&KDC Server Address"), kdc),
            // infield label
	    `VSpacing (0.5)), `HSpacing (0.5)
	)),
        `VSpacing (0.2),
	// frame label
	`Frame (_("AFS Settings"), `HBox(`HSpacing (0.5), `VBox(
	    `VSpacing (0.5),
	    `Left(`CheckBox (`id(`afs),`opt(`notify),
		// chekbox label
		_("Kerberos support for &AFS"), use_afs)),
	    `VSpacing (0.5),
	    `HBox (
		// textentry label
		`TextEntry (`id(`cell), _("AFS &Cell Name"), cell),
		// textentry label
		`TextEntry (`id(`afs_serverip), _("IP Adress of A&FS Server"),
		    afs_serverip)
	    ),
	    `VSpacing (0.5)), `HSpacing (0.5)
	)),
        `VSpacing (0.2),
	`Right(`PushButton (`id(`advanced), _("Ad&vanced Settings..."))),
        `VSpacing (0.2)
    ), `HSpacing(3));


    Wizard::SetContentsButtons (
        // dialog title
        _("Kerberos Client Configuration"), con, help_text,
        Label::BackButton (), Label::FinishButton ());

    UI::ChangeWidget (`id (`cell), `Enabled, use_afs);
    UI::ChangeWidget (`id (`afs_serverip), `Enabled, use_afs);

    foreach (symbol widget, [`realm, `domain, `kdc, `afs, `advanced], ``{
	UI::ChangeWidget (`id (widget), `Enabled, use_pam_krb);
    });

    any result = nil;
    do
    {
        result = UI::UserInput ();
	use_afs = UI::QueryWidget (`id(`afs), `Value) && afs_available;

	if (result == `afs) {
	    UI::ChangeWidget (`id (`cell), `Enabled, use_afs);
	    UI::ChangeWidget (`id (`afs_serverip), `Enabled, use_afs);
	}

        if (result == `pamyes || result == `pamno)
	{
            use_pam_krb = (result == `pamyes);
	    foreach (symbol widget, [`realm, `domain, `kdc, `advanced],``{
		UI::ChangeWidget (`id (widget), `Enabled, use_pam_krb);
	    });
	    UI::ChangeWidget (`id (`afs),`Enabled,use_pam_krb && afs_available);
	    if (result == `pamno)
	    {
		UI::ChangeWidget (`id (`cell), `Enabled, false);
		UI::ChangeWidget (`id (`afs_serverip), `Enabled, false);
	    }
	    else
	    {
		UI::ChangeWidget (`id (`cell), `Enabled, use_afs);
		UI::ChangeWidget (`id (`afs_serverip), `Enabled, use_afs);
	    }
	    use_afs = use_afs && use_pam_krb;
	}

        if (result == `next || result == `advanced) {

            default_realm = UI::QueryWidget (`id(`realm), `Value);
            default_domain = UI::QueryWidget (`id(`domain), `Value);
            kdc = UI::QueryWidget (`id(`kdc), `Value);
            afs_serverip = UI::QueryWidget (`id(`afs_serverip), `Value);
            cell = UI::QueryWidget (`id(`cell), `Value);
	    use_afs = use_afs && use_pam_krb;

            if (default_realm == "")
            {
		// error popup label
		Report::Error(_("Enter the default realm name."));
		UI::SetFocus (`id(`realm));
		continue;
            }

	    if (kdc == "")
            {
                // error popup label
                Report::Error(_("Enter the address of the KDC server."));
		UI::SetFocus (`id(`kdc));
                continue;
            }
	    if (use_afs && afs_serverip == "")
            {
                // error popup label
                Report::Error(_("Enter the address of the AFS server."));
		UI::SetFocus (`id(`afs_serverip));
                continue;
            }
	    if (use_afs && !check_ip4 (afs_serverip))
	    {
		/* Popup text */
		Popup::Error(_("The IP address is incorrect"));
		UI::SetFocus(`id(`afs_serverip));
		continue;
	    }
	    if (use_afs && cell == "")
            {
                // error popup label
                Report::Error(_("Enter the AFS cell name."));
		UI::SetFocus (`id(`cell));
                continue;
            }
	    // check for openafs* packages
	    if (use_afs)
	    {
		if (!Require::AreAllPackagesInstalledTarget (["openafs",
		    "openafs-client"]) &&
		     !contains (packages, "openafs"))
		{
		    if (!Mode::config && !Require::IsPackageAvailableTarget ("openafs"))
		    {
			// error message, %1 is package name
			Popup::Error (sformat (_("Package \"%1\" is not available for installation!
AFS cannot be enabled."), "openafs"));
			afs_available = false;
			UI::ChangeWidget (`id (`afs), `Value, false);
			UI::ChangeWidget (`id (`afs), `Enabled, false);
			UI::ChangeWidget (`id (`cell), `Enabled, false);
			UI::ChangeWidget (`id (`afs_serverip), `Enabled, false);
			continue;
		    }
		    if (!Mode::config && !Require::IsPackageAvailableTarget ("openafs-client"))
		    {
			// error message, %1 is package name
			Popup::Error (sformat (_("Package \"%1\" is not available for installation!
AFS cannot be enabled."), "openafs-client"));
			afs_available = false;
			UI::ChangeWidget (`id (`afs), `Value, false);
			UI::ChangeWidget (`id (`afs), `Enabled, false);
			UI::ChangeWidget (`id (`cell), `Enabled, false);
			UI::ChangeWidget (`id (`afs_serverip), `Enabled, false);
			continue;
		    }
		    // yes/no pupup
		    if (Popup::YesNo (_("Packages \"openafs\" and \"openafs-client\"
are necessary for using AFS.
Intall them?")))
			packages = union(packages,["openafs","openafs-client"]);
		    else
		    {
			result = nil;
			continue;
		    }
		}
	    }
	    else
	    {
		packages = filter (`p, packages, ``( !contains (
		    ["openafs", "openafs-client"], p)));
	    }
        }

    } while (!contains ([`back, `cancel, `abort, `next, `advanced], result));

    if (result == `next && use_pam_krb)
    {
	if  (!Require::IsAnyPackageInstalledTarget (["heimdal-tools"]) &&
	    !contains (packages, "heimdal-tools") &&
		// yes/no popup
		Popup::YesNo (_("To use Kerberos client services,
package \"heimdal-tools\" could be useful.
Install this package?")))
		    packages = add (packages, "heimdal-tools");
    }
    if (result == `next || result == `advanced)
    {
        Kerberos::modified = true;
        Kerberos::default_domain = default_domain;
	Kerberos::default_realm = default_realm;
	Kerberos::kdc = kdc;

        if (use_pam_krb != Kerberos::use_pam_krb)
        {
            Kerberos::pam_modified = true;
            Kerberos::use_pam_krb = use_pam_krb;
        }

	if (cell != Kerberos::afs_cell || use_afs != Kerberos::use_afs ||
	    afs_serverip != Kerberos::afs_serverip)
	{
	    Kerberos::use_afs		= use_afs;
	    Kerberos::afs_cell		= cell;
	    Kerberos::afs_serverip	= afs_serverip;
	    Kerberos::afs_modified	= true;
	    Kerberos::pam_modified	= true;
	}
	Kerberos::packages = union (Kerberos::packages, packages);
    }
    return result;
}

/**
 * Kerberos advanced configuration
 * @return dialog result
 */
global define symbol AdvancedDialog() ``{

    string help_text =

    // help text (do not transl. values "m","h", "d")
    _("<p>Values of <b>Ticket Lifetime</b> and <b>Renewable Lifetime</b> are
in seconds as default. Alternatively, you can specify the time unit (<i>m</i>
for minutes, <i>h</i> for hours and <i>d</i> for days) and use it as a value
suffix (e.g. <i>1d</i> or <i>24h</i> for one day).</p>") +

    // help text
    _("<p><b>Forwardable tickets</b> let you transfer your complete identity
(TGT) to another machine, while <b>proxiable tickets</b> only let you transfer
particular tickets.</p>") +

    // help text
    _("<p>If <b>Retain Tickets</b> is true, PAM module retains the tickets
after closing the session.</p>") +

    // help text
    _("<p>To enable Kerberos support for your <b>openssh client</b>, check the
appropriate checkbox. In such case, Kerberos ticket will be used for user
authentiction on the ssh server.</p>") +

    // help text
    _("<p>When <b>Minimum UID</b> is greater than 0, authentication attempts by
users with UIDs below the specified number will be ignored. It is useful for
disabling Kerberos authentication for system administrator (<i>root</i>).</p>")+

    // help text
    _("<p>
The <b>Clock Skew</b> is the tolerance for the time stamps not exactly matching the host's system clock. The value is in seconds.</p>");

    string uid		= Kerberos::minimum_uid;
    string ticket	= Kerberos::ticket_lifetime;
    string renew	= Kerberos::renew_lifetime;
    boolean forw	= Kerberos::forwardable == "true";
    boolean prox	= Kerberos::proxiable == "true";
    boolean retain	= Kerberos::retain_after_close == "true";
    boolean ssh		= Kerberos::ssh_support;

    integer max_skew	= 10000; // randomly choosed
    string clockskew	= Kerberos::clockskew;

//    list packages = Kerberos::packages;

    term con = `HBox (`HSpacing (3), `VBox (
        `VSpacing (1),
	// frame label
	`Frame (_("Ticket Attributes"), `HBox(`HSpacing (0.5), `VBox(
	    `VSpacing (0.5),
	    // textentry label
	    `TextEntry (`id (`ticket), _("&Default Ticket Lifetime"), ticket),
	    // textentry label
	    `TextEntry (`id (`renew), _("Def&ault Renewable Ticket Lifetime"),
		renew),
	    // checkbox label
	    `Left(`CheckBox (`id (`forw), _("Tickets are For&wardable"), forw)),
	    // checkbox label
	    `Left(`CheckBox (`id (`prox), _("Tickets are &Proxiable"), prox)),
	    // checkbox label
	    `Left(`CheckBox (`id (`retain), _("R&etain Tickets"), retain)),
	    `VSpacing (0.5)), `HSpacing (0.5)
	)),
        `VSpacing (1),
	`Left(`CheckBox (`id (`ssh),
	    // checkbox label (leave 'openssh')
	    _("Kerberos support for open&ssh client"), ssh)),
        `VSpacing (0.5),
        // infield label
        `IntField (`id (`uid), _("Minimum &UID"), 0, 60000,
	    tointeger (uid)),
	// infield label
	`IntField (`id (`skew), _("&Clock Skew"), 0, max_skew,
	    tointeger (clockskew)),
        `VSpacing (1)
    ), `HSpacing(3));

    Wizard::SetContentsButtons (
        // dialog title
        _("Advanced Kerberos Client Configuration"), con, help_text,
        Label::BackButton (), Label::NextButton ());

    any result = nil;
    do
    {
        result = UI::UserInput ();

        if (result == `next) {
	    // check the values (lifetimes: d/m/h)
            ticket = UI::QueryWidget (`id(`ticket), `Value);
	    if (!regexpmatch (ticket, "^([0-9]+)[dmh]$") &&
		!regexpmatch (ticket, "^([0-9]+)$"))
	    {
		// error popup (wrong format of entered value)
		Popup::Error (_("Invalid format of Ticket Lifetime entry.
Try again."));
		UI::SetFocus (`id(`ticket));
		continue;
	    }
            renew = UI::QueryWidget (`id(`renew), `Value);
	    if (!regexpmatch (renew, "^([0-9]+)[dmh]$") &&
		!regexpmatch (renew, "^([0-9]+)$"))
	    {
		Popup::Error (_("Invalid format of Ticket Lifetime entry.
Try again."));
		UI::SetFocus (`id(`renew));
		continue;
	    }
            clockskew = sformat ("%1", UI::QueryWidget (`id(`skew), `Value));

	    ssh = UI::QueryWidget (`id(`ssh), `Value);

	    /*
	    if (ssh)
	    {
		if  (!Require::IsAnyPackageInstalled (["openssh"]) &&
		     !contains (packages, "openssh"))
		{
		    // yes/no pupup
		    if (Popup::YesNo (_("Package \"openssh\" is necessary.
Install it?")))
			packages = add (packages, "openssh");
		    else
		    {
			result = nil;
			continue;
		    }
		}
	    }
	    else
	    {
		packages = filter (`p, packages, ``( p != "openssh"));
	    }
	    */
        }

    } while (!contains ([`back, `next, `cancel, `abort], result));

    if (result == `next)
    {
        Kerberos::minimum_uid = sformat("%1",UI::QueryWidget(`id(`uid),`Value));
	Kerberos::ticket_lifetime = ticket;
	Kerberos::renew_lifetime = renew;
	Kerberos::forwardable = UI::QueryWidget (`id(`forw), `Value) ?
	    "true" : "false";
	Kerberos::proxiable = UI::QueryWidget (`id(`prox), `Value) ?
	    "true" : "false";
	Kerberos::retain_after_close = UI::QueryWidget (`id(`retain), `Value) ?
	    "true" : "false";
        Kerberos::clockskew = clockskew;

	if (ssh != Kerberos::ssh_support)
	{
	    Kerberos::ssh_modified = true;
	    Kerberos::ssh_support = ssh;
	}
    }
    return result;
}

/**
 * Check syntax of IPv4 address
 * @param ip IPv4 address
 * @return true if correct
 */
global define boolean check_ip4(string ip) ``{
    if(ip == nil || ip == "") return false;
    string num = "(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])";
    string ipv4 = "^" + num + "(\\." + num + "){3}$";
    return regexpmatch(ip, ipv4);
}


/* EOF */
}
