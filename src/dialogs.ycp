/**
 * File:	include/kerberos-client/dialogs.ycp
 * Package:	Configuration of kerberos-client
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "kerberos";

import "Address";
import "IP";
import "Kerberos";
import "Label";
import "Mode";
import "Package";
import "Popup";
import "Report";
import "Stage";
import "Wizard";

/**
 * The dialog that appears when the [Abort] button is pressed.
 * @return `abort if user really wants to abort, `back otherwise
 */
define symbol ReallyAbort () {

    boolean ret = true;
    if (!Stage::cont () || contains (WFM::Args (), "from_users"))
    {
	ret = Popup::ReallyAbort (Kerberos::Modified());;
    }
    else
    {
	ret = Popup::ConfirmAbort (`incomplete);
    }

    if ( ret )	return `abort;
    else	return `back;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
define symbol ReadDialog() ``{
    boolean ret = Kerberos::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
define symbol WriteDialog() ``{
    // help text
    Wizard::RestoreHelp(_("Writing Kerberos client settings..."));
    boolean ret = Kerberos::Write();
    return ret ? `next : `abort;
}

/**
 * check the validity of the entered address
 * enhanced for setting the port number after colon
 */
define boolean check_address (string address) {

    list address_l = splitstring (address, ":");
    if (size (address_l) == 1)
	return Address::Check (address);
    else if (size (address_l) == 2)
    {
	return
	    Address::Check (address_l[0]:"") &&
	    regexpmatch (address_l[1]:"0", "^[0-9]+$");
    }
    else return false;
}

/**
 * Dialog for configuring Kerberos client (values in /etc/krb5.conf)
 * @return dialog result
 */
define symbol ConfigureDialog() {

    // help text 1/5
    string help_text = _("<p>
<b><big>Authentication with Kerberos</big></b><br>
The Kerberos client configuration updates your PAM settings to enable Kerberos authentication.  Your system needs access to a Kerberos server in the network for this to work.
</p>
") +
    // help text 2/5
    _("<p>
<b>Basic Client Settings</b>:
Enter your <b>Default Domain</b>, <b>Default Realm</b>, and the hostname or address of your Key Distribution Center (<b>KDC Server Address</b>). To specify more values for KDC, separate them by spaces.</p>") +

    // help text 3/5
    _("<p>
It is common practice to use the domain name in uppercase as your default realm name, but you can select freely. If the realm is not available on the server, you cannot log in.  Ask your server administrator if you need more information.</p>
") +

	//rwalter: the appearance order of this and 4/5 is reversed. Please fix.
    // help text 5/5
    _("<p>To configure more settings, click <b>Advanced Settings</b>.</p>");

    // during installation, star ldap is default value
    boolean installation    =
	Stage::cont () && !contains (WFM::Args (), "from_users");
    string default_realm = Kerberos::default_realm;
    string kdc = Kerberos::kdc;
    string default_domain = Kerberos::default_domain;
    boolean use_pam_krb = Kerberos::use_pam_krb || installation;

    term con = `HBox (`HSpacing (3), `VBox (
        `VSpacing (0.5),
        `RadioButtonGroup(`id(`rd),
	    `Left(`HVSquash(`VBox (
		// radio button label
                `Left (`RadioButton(`id(`pamno), `opt (`notify), _("Do No&t Use Kerberos"), !use_pam_krb)),
		// radio button label
                `Left(`RadioButton(`id(`pamyes), `opt (`notify), _("&Use Kerberos"), use_pam_krb)))))
	),
        `VSpacing (),
	// frame label
	`Frame (_("Basic Kerberos Settings"), `HBox(`HSpacing (0.5), `VBox(
	    `VSpacing (0.5),
	    `HBox(
		// textentry label
		`TextEntry (`id (`domain), _("Default &Domain"),default_domain),
		// textentry label
		`TextEntry (`id (`realm), _("Default Real&m"), default_realm)
	    ),
	    // textentry label
	    `TextEntry (`id (`kdc), _("&KDC Server Address"), kdc),
            // infield label
	    `VSpacing (0.5)), `HSpacing (0.5)
	)),
        `VSpacing (0.6),
	// pushbutton label
	`Right(`PushButton (`id(`advanced), _("Ad&vanced Settings..."))),
        `VSpacing (0.2)
    ), `HSpacing(3));

    Wizard::SetContentsButtons (
        // dialog title
        _("Kerberos Client Configuration"), con, help_text,
        Label::BackButton (),
	Stage::cont () ? Label::NextButton () : Label::FinishButton ()
    );
    Wizard::RestoreAbortButton ();

    foreach (symbol widget, [`realm, `domain, `kdc, `advanced], ``{
	UI::ChangeWidget (`id (widget), `Enabled, use_pam_krb);
    });
    // during installation, only enabling makes sence
    if (installation)
    {
	UI::ChangeWidget (`id (`pamno), `Enabled, false);
    }

    symbol result = nil;
    do
    {
        result	= (symbol) UI::UserInput ();

        if (result == `pamyes || result == `pamno)
	{
            use_pam_krb = (result == `pamyes);
	    foreach (symbol widget, [`realm, `domain, `kdc, `advanced],``{
		UI::ChangeWidget (`id (widget), `Enabled, use_pam_krb);
	    });
	}

        if (result == `next || result == `advanced) {

            default_realm = (string) UI::QueryWidget (`id(`realm), `Value);
            default_domain = (string) UI::QueryWidget (`id(`domain), `Value);
            kdc = (string) UI::QueryWidget (`id(`kdc), `Value);

            if (use_pam_krb && default_realm == "")
            {
		// error popup label
		Report::Error(_("Enter the default realm name."));
		UI::SetFocus (`id(`realm));
		result = `not_next;
		continue;
            }

	    if (use_pam_krb && kdc == "")
            {
                // error popup label
                Report::Error(_("Enter the address of the KDC server."));
		UI::SetFocus (`id(`kdc));
		result = `not_next;
                continue;
            }
	    if (use_pam_krb)
	    {
		list<string> kdcs	= splitstring (kdc, " \t");
		boolean checked		= true;
		foreach (string k, kdcs, {
		    checked	= checked && check_address (k);
		});
		if (!checked)
		{
		    // error popup label
		    Report::Error (_("The KDC server address is invalid.") +
			"\n\n" + Address::Valid4 ());
		    UI::SetFocus (`id(`kdc));
		    result = `not_next;
		    continue;
		}
	    }
        }
	if ((result == `abort || result == `cancel) &&
	    ReallyAbort () != `abort)
	{
	    result = `not_next;
	}
	if (result == `next && use_pam_krb)
	{
	    if (!Package::InstallAll (Kerberos::UpdatedArchPackages (Kerberos::required_packages)))
	    {
		result = `not_next;
		use_pam_krb	= false;
		UI::ChangeWidget (`id (`rd), `Value, `pamno);
		foreach (symbol widget, [`realm, `domain, `kdc, `advanced],``{
		    UI::ChangeWidget (`id (widget), `Enabled, use_pam_krb);
		});
	    }
	}
    } while (!contains ([`back, `cancel, `abort, `next, `advanced], result));

    if (result == `next || result == `advanced)
    {
        Kerberos::modified = true;
        Kerberos::default_domain = default_domain;
	Kerberos::default_realm = default_realm;
	Kerberos::kdc = kdc;

        if (use_pam_krb != Kerberos::use_pam_krb)
        {
            Kerberos::pam_modified = true;
            Kerberos::use_pam_krb = use_pam_krb;
        }
    }
    return result;
}

/**
 * Kerberos advanced configuration
 * @return dialog result
 */
define symbol AdvancedDialog() {

    string help_text =

    // help text (do not transl. values "m","h", "d")
    _("<p>Values of <b>Default Lifetime</b>, <b>Default Renewable Lifetime</b>, and
<b>Clock Skew</b> are in seconds by default. Alternatively, specify the time
unit (<tt>m</tt> for minutes, <tt>h</tt> for hours, or <tt>d</tt> for days) and use it as a value suffix, as in <tt>1d</tt> or <tt>24h</tt> for one day).</p>
") +

    // help text
    _("<p><b>Forwardable</b> lets you transfer your complete identity
(TGT) to another machine. <b>Proxiable</b> only lets you transfer
particular tickets.</p>
") +

    // help text
    _("<p>If <b>Retained</b> is enabled, a PAM module keeps the tickets
after closing the session.</p>
") +

    // help text
    _("<p>To enable Kerberos support for your OpenSSH client, select <b>Kerberos Support for OpenSSH Client</b>. In such a case, Kerberos tickets are used for user
authentication on the SSH server.</p>
") +

    // help text
    _("<p>Check <b>Ignore Unknown Users</b> to have Kerberos ignore authentication attempts by users it does not know.</p>") +

    // help text
    _("<p>When the <b>Minimum UID</b> is greater than 0, authentication attempts by
users with UIDs below the specified number are ignored. This is useful for
disabling Kerberos authentication for the system administrator root.</p>
")+

    // help text
    _("<p>
The <b>Clock Skew</b> is the tolerance for time stamps not exactly matching the host's system clock. The value is in seconds.</p>") +

    //helptext
    _("<p>
To synchronize your time with an NTP server, configure your computer
as an NTP client. Access the configuration with <b>NTP Configuration</b>.
</p>
") +

    // help text about launching selected yast module
    _("<p>To configure the source of user accounts, select the appropriate configuration module in <b>Configure User Data</b>.</p>");

    string uid		= Kerberos::minimum_uid;
    string ticket	= Kerberos::ticket_lifetime;
    string renew	= Kerberos::renew_lifetime;
    boolean forw	= Kerberos::forwardable == "true";
    boolean prox	= Kerberos::proxiable == "true";
    boolean retain	= Kerberos::retain_after_close == "true";
    boolean ssh		= Kerberos::ssh_support;
    boolean ignore_unknown	= Kerberos::ignore_unknown;
    string clockskew	= Kerberos::clockskew;

    term con = `HBox (`HSpacing (3), `VBox (
        `VSpacing (0.8),
	// frame label
	`Frame (_("Ticket Attributes"), `HBox(`HSpacing (0.5), `VBox(
	    `VSpacing (0.5),
	    // textentry label
	    `TextEntry (`id (`ticket), _("&Default Lifetime"), ticket),
	    // textentry label
	    `TextEntry (`id (`renew), _("De&fault Renewable Lifetime"),
		renew),
	    // checkbox label
	    `Left(`CheckBox (`id (`forw), _("For&wardable"), forw)),
	    // checkbox label
	    `Left(`CheckBox (`id (`prox), _("&Proxiable"), prox)),
	    // checkbox label
	    `Left(`CheckBox (`id (`retain), _("R&etained"), retain)),
	    `VSpacing (0.5)), `HSpacing (0.5)
	)),
        `VSpacing (0.8),
	`Left(`CheckBox (`id (`ssh),
	    // checkbox label
	    _("Kerberos Support for Open&SSH Client"), ssh)),
        `VSpacing (0.4),
	`Left (`CheckBox (`id (`ignore_unknown),
	    // checkbox label
	    _("&Ignore Unknown Users"), ignore_unknown)),
        `VSpacing (0.4),
        // UID=User ID
        `IntField (`id (`uid), _("Minimum &UID"), 0, 60000,
	    tointeger (uid)),
	`HBox (
	    // textentry label
	    `TextEntry (`id (`skew), _("C&lock Skew"), clockskew),

	    `VBox (
		`Label (""),
		// button label (run YaST client for NTP)
		`PushButton (`id(`ntp), _("&NTP Configuration..."))
	    )
	),
	`VSpacing (),
	`Left (
	    // menu button label
	    `MenuButton (`id (`nss_client), _("C&onfigure User Data"), [
		// menu item
		`item (`id (`ldap), _("LDAP Client")),
		// menu item
		`item (`id (`nis), _("NIS Client"))
	    ])
	),
        `VSpacing (1)
    ), `HSpacing(3));

    Wizard::SetContentsButtons (
        // dialog title
        _("Advanced Kerberos Client Configuration"), con, help_text,
        Label::CancelButton (), Label::AcceptButton ());
    Wizard::HideAbortButton ();

    if (Mode::config ())
    {
        UI::ChangeWidget(`id(`ntp), `Enabled, false);
        UI::ChangeWidget(`id(`nss_client), `Enabled, false);
    }

    symbol result = nil;
    do
    {
        result = (symbol) UI::UserInput ();

	if (result == `ntp || result == `ldap || result == `nis)
	{
	    string cl = substring (tostring (result), 1);
	    if (Package::Install (sformat ("yast2-%1-client", cl)));
	    {
		WFM::CallFunction (cl + "-client", []);
	    }
	}

        if (result == `next) {
	    // check the values (lifetimes: d/m/h)
            ticket = (string) UI::QueryWidget (`id(`ticket), `Value);
	    if (!regexpmatch (ticket, "^([0-9]+)[dmh]$") &&
		!regexpmatch (ticket, "^([0-9]+)$"))
	    {
		// error popup (wrong format of entered value)
		Popup::Error (_("Lifetime is invalid.
Try again."));
		UI::SetFocus (`id(`ticket));
		result = `not_next;
		continue;
	    }
            renew = (string) UI::QueryWidget (`id(`renew), `Value);
	    if (!regexpmatch (renew, "^([0-9]+)[dmh]$") &&
		!regexpmatch (renew, "^([0-9]+)$"))
	    {
		// error popup (wrong format of entered value)
		Popup::Error (_("Lifetime is invalid.
Try again."));
		UI::SetFocus (`id(`renew));
		result = `not_next;
		continue;
	    }
            clockskew = (string) UI::QueryWidget (`id(`skew), `Value);
	    if (!regexpmatch (clockskew, "^([0-9]+)[dmh]$") &&
		!regexpmatch (clockskew, "^([0-9]+)$"))
	    {
		// error popup (wrong format of entered value)
		Popup::Error (_("Clock skew is invalid.
Try again.
"));
		UI::SetFocus (`id(`skew));
		result = `not_next;
		continue;
	    }

	    ssh = (boolean) UI::QueryWidget (`id(`ssh), `Value);

        }
	if ((result == `abort || result == `cancel) &&
	    ReallyAbort () != `abort)
	{
	    result = `not_next;
	}

    } while (!contains ([`back, `next, `cancel, `abort], result));

    if (result == `next)
    {
        Kerberos::minimum_uid = sformat("%1",UI::QueryWidget(`id(`uid),`Value));
	Kerberos::ticket_lifetime = ticket;
	Kerberos::renew_lifetime = renew;
        Kerberos::clockskew = clockskew;
	Kerberos::forwardable = (boolean)UI::QueryWidget (`id(`forw), `Value) ?
	    "true" : "false";
	Kerberos::proxiable = (boolean) UI::QueryWidget (`id(`prox), `Value) ?
	    "true" : "false";
	Kerberos::retain_after_close =
	    (boolean) UI::QueryWidget (`id(`retain), `Value) ? "true" : "false";
	if (ssh != Kerberos::ssh_support)
	{
	    Kerberos::ssh_modified = true;
	    Kerberos::ssh_support = ssh;
	}
	ignore_unknown	= (boolean) UI::QueryWidget (`id(`ignore_unknown), `Value);
        if (ignore_unknown != Kerberos::ignore_unknown)
        {
            Kerberos::pam_modified	= true;
	    Kerberos::ignore_unknown	= ignore_unknown;
	}
    }
    return result;
}


/* EOF */
}
