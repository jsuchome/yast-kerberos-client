/**
 * File:	include/kerberos-client/dialogs.ycp
 * Package:	Configuration of kerberos-client
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "kerberos";

import "Wizard";

import "Kerberos";
import "Report";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";


/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{
    boolean ret = Kerberos::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    boolean ret = Kerberos::Write();
    return ret ? `next : `abort;
}

/**
 * Configure PAM files to authenticate your users against Kerberos server
 * @return dialog result
 */
global define symbol PamDialog() ``{

    // help text 1/4
    string help_text = _("<p>
<b>Autentication with Kerberos</b><br>
You can update your PAM settings to enable the Kerberos autentication for your users. 
</p>")+

    // help text 2/4
_("<p><b>Authentication modes</b><br>
If you choose <b>optional</b> mode, the primary authentication is with the existing framework, such as user entries in the <i>/etc/shadow</i> or NIS/LDAP database. The only difference is that, in addition, if there is a Kerberos principal associated with the user, PAM module will try to obtain a ticket on behalf of the user, using the previously suplied password.
</p>") +

    // help text 3/4
_("<p>If you want to use Kerberos PAM module as a primary authentication mechanism, select <b>sufficient</b>. When user fails to log in (because there is no such principal in Kerberos database or the KDC is down), the system will try to authenticate the user with the entered password against the remaining defined database (local files, NIS, LDAP).
</p>") +

    // help text 4/4
_("<p>Selecting mode as <b>required</b> will also set Kerberos authentication as primary one. But in this case no user who doesn't exist in Kerberos database will be able to login. If you want to login as a <i>root</i>, you have to use the <i>su</i> command from another user's session.</p>");

    boolean use_pam_krb = Kerberos::use_pam_krb;
    string control = Kerberos::control;
//    string arguments = Kerberos::argumets;

    list controls = [
        `item (`id ("optional"), "optional", false),
        `item (`id ("sufficient"), "sufficient", false),
        `item (`id ("required"), "required", false)
    ];

    term con = `HVSquash(
        `VBox (
        `VSpacing(1),
        // frame label
        `Frame (_("PAM login"),
            `VBox (
                `VSpacing (0.5),
                `RadioButtonGroup(`id(`rd),
                    `Left(`HVSquash(`VBox (
                        // radio button label
                        `Left (`RadioButton(`id(`pamno), `opt (`notify), _("Do no&t use Kerberos"), !use_pam_krb)),
                        // radio button label
                        `Left(`RadioButton(`id(`pamyes), `opt (`notify), _("&Use Kerberos"), use_pam_krb)))))),
                // text entry label
                `ComboBox (`id (`auth_control), `opt(`hstretch),
                    _("&Authentication mode"), controls),
                `VSpacing (0.5))
        ),
        `VSpacing(1)
    ));

    Wizard::SetContentsButtons (
        // dialog title
        _("Authentication with Kerberos"), con, help_text,
        UI::BackButtonLabel (), UI::NextButtonLabel ());

    UI::ChangeWidget (`id (`auth_control), `Enabled, use_pam_krb);

    if (control != "")
        UI::ChangeWidget (`id(`auth_control), `Value, control);

    any result = nil;
    do
    {
        result = UI::UserInput ();

        if (result == `pamyes || result == `pamno) {
            use_pam_krb = (result == `pamyes);
            UI::ChangeWidget (`id (`auth_control), `Enabled, use_pam_krb);
        }

        control = UI::QueryWidget (`id (`auth_control), `Value);


    } while
    (result != `back && result != `next && result !=`cancel && result !=`abort);

    if (result == `next)
    {
        if (use_pam_krb != Kerberos::use_pam_krb ||
            control != Kerberos::control)
        {
            Kerberos::use_pam_krb = use_pam_krb;
            Kerberos::control = control;
            Kerberos::pam_modified = true;
        }
    }

    return result;
}

/**
 * Dialog for configuring Kerberos client (values in /etc/krb5.conf)
 * @return dialog result
 */
global define symbol ConfigureDialog() ``{

    // help text 1/3
    string help_text = _("<p>
<b>Setting up the Kerberos client</b><br>
This is a confiuration of your client. Please enter your <b>domain</b>, <b>default realm</b> and the <b>host name</b> or <b>adress</b> of your Key Distribution Center (KDC)</p>") +

    // help text 2/3
    _("<p>
It is common practice to use domain name in uppercase for your default realm name. But you can use what do you prefere.</p>") +

    // help text 3/3
    _("<p>
The <b>clock skew</b> is the tolerance for the time stamps not exactly matching the host's system clock. It is usually set to 300 seconds.</p>");

    string default_realm = Kerberos::default_realm;
    string kdc = Kerberos::kdc;
    string default_domain = Kerberos::default_domain;
    string clockskew = Kerberos::clockskew;
    integer max_skew = 10000; // randoly choosed

    term con = `HVSquash(
        `VBox (
        `VSpacing(1),
        // frame label
        `Frame (_("Kerberos client settings"),
            `VBox (
                `VSpacing (0.5),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`domain), _("Default &domain"),
                         default_domain)),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`realm), _("Default real&m"),
                         default_realm)),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`kdc), _("&KDC server adress"), kdc)),
                // infield label
                `IntField (`id (`skew), _("&Clock skew"), 0, max_skew,
                    tointeger(clockskew)),
                `VSpacing (0.5)
            )
        ),
        `VSpacing(1)
    ));

    Wizard::SetContentsButtons (
        // dialog title
        _("Kerberos Client Configuration"), con, help_text,
        UI::BackButtonLabel (), UI::FinishButtonLabel ());

    any result = nil;
    do
    {
        result = UI::UserInput ();

        if (result == `next) {

            default_realm = UI::QueryWidget (`id(`realm), `Value);
            default_domain = UI::QueryWidget (`id(`domain), `Value);
            kdc = UI::QueryWidget (`id(`kdc), `Value);
            clockskew = sformat ("%1", UI::QueryWidget (`id(`skew), `Value));

            if (default_realm == "")
            {
               // error popup label
               Report::Error(_("Enter the default realm name."));
               result = nil;
               continue;
            }

           if (kdc == "")
            {
                // error popup label
                Report::Error(_("Enter the address of KDC server."));
                result = nil;
                continue;
            }
        }

    } while
    (result != `back && result != `next && result !=`cancel && result !=`abort);

    if (result == `next)
    {
        Kerberos::default_domain = default_domain;
        Kerberos::default_realm = default_realm;
        Kerberos::kdc = kdc;
        Kerberos::clockskew = clockskew;
    }
    return result;
}

/* EOF */
}
