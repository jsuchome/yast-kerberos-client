/**
 * File:	include/kerberos-client/dialogs.ycp
 * Package:	Configuration of kerberos-client
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "kerberos";

import "Wizard";

import "Kerberos";
import "Report";
import "Mode";

import "Popup";
import "Label";

/**
 * The dialog that appears when the [Abort] button is pressed.
 * @return `abort if user really wants to abort, `back otherwise
 */
global define symbol ReallyAbort () ``{

    boolean ret = true;
    if (!Mode::cont)
    {
	ret = Popup::ReallyAbort (Kerberos::Modified());;
    }
    else
	ret = CallFunction(`inst_confirm_abort(`incomplete));
    if ( ret )	return `abort;
    else	return `back;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{
    boolean ret = Kerberos::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    // help text
    Wizard::RestoreHelp(_("Writing Kerberos Client settings"));
    boolean ret = Kerberos::Write();
    return ret ? `next : `abort;
}

/**
 * Configure PAM files to authenticate your users against Kerberos server
 * @return dialog result
 */
global define symbol PamDialog() ``{

    // help text 1/4
    string help_text = _("<p>
<b>Authentication with Kerberos</b><br>
You can update your PAM settings to enable Kerberos authentication for your users. 
</p>
")+

_("<p>For configuration of Kerberos client settings, click <b>Next</b> button.</p>");

    /*FIXME not changable now?
     // help text 2/4
_("<p><b>Authentication Modes</b><br>
If you choose <b>optional</b> mode, the primary authentication is with the existing framework, such as user entries in the <i>/etc/shadow</i> or the NIS or LDAP database. The only difference is that, if there is a Kerberos principal associated with the user, the PAM module will additionally try to obtain a ticket on behalf of the user using the previously supplied password.
</p>
") +

    // help text 3/4
_("<p>To use the Kerberos PAM module as a primary authentication mechanism, select <b>sufficient</b>. When a user fails to log in (because there is no such principal in Kerberos database or the KDC is down), the system will try to authenticate the user with the entered password against the remaining defined database (local files, NIS, LDAP).
</p>
") +

    // help text 4/4
_("<p>Selecting mode as <b>required</b> will also set Kerberos authentication as the primary mechanism. However, in this case no user who does not exist in the Kerberos database can login. To login as <i>root</i>, the <i>su</i> command must be used from another user's session.</p>");
*/

    boolean use_pam_krb = Kerberos::use_pam_krb;
    boolean use_afs = Kerberos::use_afs;
    string control = Kerberos::control;

    list controls = [
        `item (`id ("optional"), "optional", false),
        `item (`id ("sufficient"), "sufficient", false),
        `item (`id ("required"), "required", false)
    ];

    /*
    term con = `HVSquash(
        `VBox (
        `VSpacing(1),
        // frame label
        `Frame (_("PAM Login"), `HBox (
	    `HSpacing (0.5),
            `VBox (
                `VSpacing (0.5),
                `RadioButtonGroup(`id(`rd),
                    `Left(`HVSquash(`VBox (
                        // radio button label
                        `Left (`RadioButton(`id(`pamno), `opt (`notify), _("Do No&t Use Kerberos"), !use_pam_krb)),
                        // radio button label
                        `Left(`RadioButton(`id(`pamyes), `opt (`notify), _("&Use Kerberos"), use_pam_krb)))))),
                // text entry label
                `ComboBox (`id (`auth_control), `opt(`hstretch),
                    _("&Authentication Mode"), controls),
                `VSpacing (0.5)),
	    `HSpacing (0.5))
        ),
        `VSpacing(1)
    ));
    */
    term con = `HVSquash(
        `VBox (
        `VSpacing(1),
        // frame label
        `Frame (_("Authentication"), `HBox (
	    `HSpacing (0.5),
            `VBox (
                `VSpacing (0.5),
                `RadioButtonGroup(`id(`rd),
                    `Left(`HVSquash(`VBox (
                        // radio button label
                        `Left (`RadioButton(`id(`pamno), `opt (`notify), _("Do No&t Use Kerberos"), !use_pam_krb)),
                        // radio button label
                        `Left(`RadioButton(`id(`pamyes), `opt (`notify), _("&Use Kerberos"), use_pam_krb)))))),
                `VSpacing (0.5)),
	    `HSpacing (0.5))
        ),
//        `VSpacing (0.5),
	// checkbox label
//	`CheckBox (`id(`afs), _("Use module for &AFS"), use_afs),
        `VSpacing(1)
    ));

    // dialog title
    Wizard::SetContentsButtons ( _("Authentication with Kerberos"), con,
	help_text, Label::BackButton(), use_pam_krb ?
	Label::NextButton (): Label::FinishButton());

//    UI::ChangeWidget (`id (`afs), `Enabled, use_pam_krb);

    any result = nil;
    do
    {
        result = UI::UserInput ();

//	use_afs = UI::QueryWidget (`id(`afs), `Value);

        if (result == `pamyes || result == `pamno)
	{
            use_pam_krb = (result == `pamyes);
//            UI::ChangeWidget (`id (`afs), `Enabled, use_pam_krb);
	    UI::ChangeWidget (`id (`next), `Label, use_pam_krb ?
		Label::NextButton():Label::FinishButton());
        }
    } while (!contains ([`back, `cancel, `abort, `next], result));

    if (result == `next)
    {
        if (use_pam_krb != Kerberos::use_pam_krb || use_afs!=Kerberos::use_afs)
        {
            Kerberos::use_pam_krb = use_pam_krb;
            Kerberos::use_afs = use_afs;
            Kerberos::pam_modified = true;
            Kerberos::modified = true;
        }
	if (!use_pam_krb)
	    result = `finish;
    }

    return result;
}

/**
 * Dialog for configuring Kerberos client (values in /etc/krb5.conf)
 * @return dialog result
 */
global define symbol ConfigureDialog() ``{

    // help text 1/3
    string help_text = _("<p>
<b>Setting up the Kerberos Client</b><br>
This is a configuration of your client. Enter your <b>domain</b>, <b>default realm</b>, and the <b>host name</b> or <b>address</b> of your Key Distribution Center (KDC).</p>
") +

    // help text 2/3
    _("<p>
It is common practice to use the domain name in uppercase as your default realm name. You can select freely, however.</p>
") +

    // help text 3/3
    _("<p>
The <b>clock skew</b> is the tolerance for the time stamps not exactly matching the host's system clock. It is usually set to 300 seconds.</p>");

    string default_realm = Kerberos::default_realm;
    string kdc = Kerberos::kdc;
    string default_domain = Kerberos::default_domain;
    string clockskew = Kerberos::clockskew;
    integer max_skew = 10000; // randoly choosed

    /*
    term con = `HVSquash(
        `VBox (
        `VSpacing(1),
        // frame label
        `Frame (_("Kerberos Client Settings"), `HBox (
	    `HSpacing (0.5),
            `VBox (
                `VSpacing (0.5),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`domain), _("Default &Domain"),
                         default_domain)),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`realm), _("Default Real&m"),
                         default_realm)),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`kdc), _("&KDC Server Address"), kdc)),
                // infield label
                `IntField (`id (`skew), _("&Clock Skew"), 0, max_skew,
                    tointeger(clockskew)),
                `VSpacing (0.5)
            ),
	    `HSpacing (0.5))
        ),
        `VSpacing(1)
    ));
    */
    term con = `VBox (
	`HSquash(`VBox (
	`VSpacing(1),
        // frame label
        `Frame (_("Basic Settings"), `HBox (
	    `HSpacing (0.5),
            `VBox (
                `VSpacing (0.5),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`domain), _("Default &Domain"),
                         default_domain)),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`realm), _("Default Real&m"),
                         default_realm)),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`kdc), _("&KDC Server Address"), kdc)),
                // infield label
                `IntField (`id (`skew), _("&Clock Skew"), 0, max_skew,
                    tointeger(clockskew)),
                `VSpacing (0.5)
            ),
	    `HSpacing (0.5))
        ),
        `VSpacing(1)
	)),
	`HBox (
	    `PushButton (`id(`afs), _("AF&S Client Support")),
	    `PushButton (`id(`adv), _("&Advanced Settings"))
	),
	`VSpacing (1)
    );

    Wizard::SetContentsButtons (
        // dialog title
        _("Kerberos Client Configuration"), con, help_text,
        Label::BackButton (), Label::FinishButton ());

    any result = nil;
    do
    {
        result = UI::UserInput ();

        if (result == `next) {

            default_realm = UI::QueryWidget (`id(`realm), `Value);
            default_domain = UI::QueryWidget (`id(`domain), `Value);
            kdc = UI::QueryWidget (`id(`kdc), `Value);
            clockskew = sformat ("%1", UI::QueryWidget (`id(`skew), `Value));

            if (default_realm == "")
            {
               // error popup label
               Report::Error(_("Enter the default realm name."));
               result = nil;
               continue;
            }

           if (kdc == "")
            {
                // error popup label
                Report::Error(_("Enter the address of the KDC server."));
                result = nil;
                continue;
            }
        }

    } while
    (result != `back && result != `next && result !=`cancel && result !=`abort);

    if (result == `next)
    {
	if (default_domain != Kerberos::default_domain ||
	    kdc != Kerberos::kdc || default_realm != Kerberos::default_realm ||
	    clockskew != Kerberos::clockskew)
        {
            Kerberos::default_domain = default_domain;
	    Kerberos::default_realm = default_realm;
	    Kerberos::kdc = kdc;
            Kerberos::clockskew = clockskew;
            Kerberos::modified = true;
	}
    }
    return result;
}

/* EOF */
}
