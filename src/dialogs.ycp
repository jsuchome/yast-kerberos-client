/**
 * File:	include/kerberos-client/dialogs.ycp
 * Package:	Configuration of kerberos-client
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "kerberos";

import "Wizard";

import "Kerberos";
import "Report";
import "Mode";
import "Require";

import "Popup";
import "Label";

/**
 * The dialog that appears when the [Abort] button is pressed.
 * @return `abort if user really wants to abort, `back otherwise
 */
global define symbol ReallyAbort () ``{

    boolean ret = true;
    if (!Mode::cont)
    {
	ret = Popup::ReallyAbort (Kerberos::Modified());;
    }
    else
	ret = CallFunction(`inst_confirm_abort(`incomplete));
    if ( ret )	return `abort;
    else	return `back;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{
    boolean ret = Kerberos::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    // help text
    Wizard::RestoreHelp(_("Writing Kerberos Client settings"));
    boolean ret = Kerberos::Write();
    return ret ? `next : `abort;
}

/**
 * Configure PAM files to authenticate your users against Kerberos server
 * @return dialog result
 */
global define symbol PamDialog() ``{

    // help text 1/3
    string help_text = _("<p>
<b>Authentication with Kerberos</b><br>
You can update your PAM settings to enable Kerberos authentication for your users. 
</p>
") +

    // help text 2/3
    _("<p>If you are using Kerberos authentication together with AFS file system, check <b>Kerberos for AFS</b> checkbox. To set cell name and AFS server for this cell, use <b>Configure</b> button.</p>") +

    // help text 3/3
    _("<p>For configuration of Kerberos client settings, click <b>Next</b> button.</p>");

    boolean use_pam_krb = Kerberos::use_pam_krb;
    boolean use_afs = Kerberos::use_afs;

    term con = `HVSquash(
        `VBox (
        `VSpacing(1),
        // frame label
        `Frame (_("Authentication"), `HBox (
	    `HSpacing (0.5),
            `VBox (
                `VSpacing (0.5),
                `RadioButtonGroup(`id(`rd),
                    `Left(`HVSquash(`VBox (
                        // radio button label
                        `Left (`RadioButton(`id(`pamno), `opt (`notify), _("Do No&t Use Kerberos"), !use_pam_krb)),
                        // radio button label
                        `Left(`RadioButton(`id(`pamyes), `opt (`notify), _("&Use Kerberos"), use_pam_krb)))))),
                `VSpacing (0.5)),
	    `HSpacing (0.5))
        ),
        `VSpacing (1),
        // frame label
        `Frame (_("AFS"), `HBox (
	    `HSpacing (0.5),
            `VBox (
                `VSpacing (0.5),
		// checkbox label
		`Left(`CheckBox (`id(`afs), _("Kerberos for &AFS"), use_afs)),
		// button label
		`Left(`PushButton (`id(`afs_set), _("Configure..."))),
                `VSpacing (0.5)
	    ),
	    `HSpacing (0.5))
        ),
        `VSpacing(1)
    ));

    // dialog title
    Wizard::SetContentsButtons ( _("Authentication with Kerberos"), con,
	help_text, Label::BackButton(), use_pam_krb ?
	Label::NextButton (): Label::FinishButton());

    UI::ChangeWidget (`id (`afs), `Enabled, use_pam_krb);
    UI::ChangeWidget (`id (`afs_set), `Enabled, use_pam_krb);

    any result = nil;
    do
    {
        result = UI::UserInput ();

        if (result == `pamyes || result == `pamno)
	{
            use_pam_krb = (result == `pamyes);
            UI::ChangeWidget (`id (`afs), `Enabled, use_pam_krb);
            UI::ChangeWidget (`id (`afs_set), `Enabled, use_pam_krb);
	    UI::ChangeWidget (`id (`next), `Label, use_pam_krb ?
		Label::NextButton():Label::FinishButton());
        }
	if (result == `afs_set)
	    AFSSettingsPopup();

    } while (!contains ([`back, `cancel, `abort, `next], result));

    if (result == `next)
    {
	use_afs = UI::QueryWidget (`id(`afs), `Value);

        if (use_pam_krb != Kerberos::use_pam_krb || use_afs!=Kerberos::use_afs)
        {
            Kerberos::pam_modified = true;
	    if (use_afs!=Kerberos::use_afs)
		Kerberos::afs_modified = true;
            Kerberos::use_pam_krb = use_pam_krb;
            Kerberos::use_afs = use_afs;
        }
	if (!use_pam_krb)
	    result = `finish;
	else
	    Require::RequireAndConflictButtons (["heimdal-tools"], [],
	        // install required packages (message popup)
		_("<p>To configure Kerberos client services,
package <b>%1</b> could be useful.<br>
Install it now?</p>"), Label::YesButton(), Label::NoButton());
    }

    return result;
}

/**
 * Dialog for configuring Kerberos client (values in /etc/krb5.conf)
 * @return dialog result
 */
global define symbol ConfigureDialog() ``{

    // help text 1/4
    string help_text = _("<p>
<b>Setting up the Kerberos Client</b><br>
This is a basic configuration of your client. Enter your <b>domain</b>, <b>default realm</b>, and the <b>host name</b> or <b>address</b> of your Key Distribution Center (KDC).</p>
") +

    // help text 2/4
    _("<p>
It is common practice to use the domain name in uppercase as your default realm name. You can select freely, however.</p>
") +

    // help text 3/4
    _("<p>
The <b>clock skew</b> is the tolerance for the time stamps not exactly matching the host's system clock. It is usually set to 300 seconds.</p>") +

    // help text 4/4
    _("<p>To configure more settings, click <b>Next</b> button.</p>");

    string default_realm = Kerberos::default_realm;
    string kdc = Kerberos::kdc;
    string default_domain = Kerberos::default_domain;
    string clockskew = Kerberos::clockskew;
    integer max_skew = 10000; // randoly choosed

    term con = `VBox (
	`HSquash(`VBox (
	`VSpacing(1),
        // frame label
        `Frame (_("Basic Settings"), `HBox (
	    `HSpacing (0.5),
            `VBox (
                `VSpacing (0.5),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`domain), _("Default &Domain"),
                         default_domain)),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`realm), _("Default Real&m"),
                         default_realm)),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`kdc), _("&KDC Server Address"), kdc)),
                // infield label
                `IntField (`id (`skew), _("&Clock Skew"), 0, max_skew,
                    tointeger(clockskew)),
                `VSpacing (0.5)
            ),
	    `HSpacing (0.5))
        ),
        `VSpacing(1)
	)),
	`VSpacing (1)
    );

    Wizard::SetContentsButtons (
        // dialog title
        _("Kerberos Client Configuration"), con, help_text,
        Label::BackButton (), Label::NextButton ());

    any result = nil;
    do
    {
        result = UI::UserInput ();

        if (result == `next) {

            default_realm = UI::QueryWidget (`id(`realm), `Value);
            default_domain = UI::QueryWidget (`id(`domain), `Value);
            kdc = UI::QueryWidget (`id(`kdc), `Value);
            clockskew = sformat ("%1", UI::QueryWidget (`id(`skew), `Value));

            if (default_realm == "")
            {
               // error popup label
               Report::Error(_("Enter the default realm name."));
               result = nil;
               continue;
            }

           if (kdc == "")
            {
                // error popup label
                Report::Error(_("Enter the address of the KDC server."));
                result = nil;
                continue;
            }
        }

    } while (!contains ([`back, `cancel, `abort, `next], result));

    if (result == `next)
    {
        Kerberos::default_domain = default_domain;
	Kerberos::default_realm = default_realm;
	Kerberos::kdc = kdc;
        Kerberos::clockskew = clockskew;
        Kerberos::modified = true;
    }
    return result;
}

/**
 * @return dialog result
 */
global define symbol AdvancedDialog() ``{

    // help text
    string help_text =

    // help text (do not transl. values "m","h", "d")
    _("<p>Values of <b>Ticket Lifetime</b> and <b>Renewable Lifetime</b> are
in seconds as default. Alternatively, you can specify the time unit (<i>m</i>
for minutes, <i>h</i> for hours and <i>d</i> for days) and use it as a value
suffix (e.g. <i>1d</i> or <i>24h</i> for one day).</p>") +

    // FIXME missing: forwardable/prox

    // help text
    _("<p>If <b>Retain Tickets</b> is true, PAM module retains the tickets
after closing the session.</p>") +

    // help text (do not translate root)
    _("<p>When <b>Minimum UID</b> is greater than 0, authentication attempts by
users with UIDs below the specified number will be ignored. It is useful for
disabling Kerberos authentication for system administrator (<i>root</i>).</p>")+

    // help text FIXME better?
    _("To enable Kerberos support for your openssh client, check the
appropriate checkbox.");

    string uid		= Kerberos::minimum_uid;
    string ticket	= Kerberos::ticket_lifetime;
    string renew	= Kerberos::renew_lifetime;
    boolean ssh		= Kerberos::ssh_support;
    boolean forw	= Kerberos::forwardable == "true";
    boolean prox	= Kerberos::proxiable == "true";
    boolean retain	= Kerberos::retain_after_close == "true";

    term con = `HBox (`HSpacing (3), `VBox (
        `VSpacing (1),
	`Frame (_("Ticket Attributes"), `HBox(`HSpacing (0.5), `VBox(
	    `VSpacing (0.5),
	    // textentry label
	    `TextEntry (`id (`ticket), _("&Default Ticket Lifetime"), ticket),
	    // textentry label
	    `TextEntry (`id (`renew), _("Def&ault Renewable Ticket Lifetime"),
		renew),
	    // checkbox label
	    `Left(`CheckBox (`id (`forw), _("Tickets are For&wardable"), forw)),
	    // checkbox label
	    `Left(`CheckBox (`id (`prox), _("Tickets are &Proxiable"), prox)),
	    // checkbox label
	    `Left(`CheckBox (`id (`retain), _("R&etain Tickets"), retain)),
	    `VSpacing (0.5)), `HSpacing (0.5)
	)),
        `VSpacing (1),
        // infield label
        `IntField (`id (`uid), _("Minimum &UID"), 0, 60000,
	    tointeger (uid)),
        `VSpacing (1),
	`Left(`CheckBox (`id (`ssh),
	    // checkbox label (leave 'openssh')
	    _("Enable Kerberos support for open&ssh client"), ssh)),
        `VSpacing (1)
    ), `HSpacing(3));

    Wizard::SetContentsButtons (
        // dialog title
        _("Kerberos Client Configuration, Part 2"), con, help_text,
        Label::BackButton (), Label::FinishButton ());

    any result = nil;
    do
    {
        result = UI::UserInput ();

        if (result == `next) {
	    // check the values (lifetimes: d/m/h)
            ticket = UI::QueryWidget (`id(`ticket), `Value);
	    if (!regexpmatch (ticket, "^([0-9]+)[dmh]$") &&
		!regexpmatch (ticket, "^([0-9]+)$"))
	    {
		// error popup (wrong format of entered value)
		Popup::Error (_("Invalid format of Ticket Lifetime entry.
Try again."));
		UI::SetFocus (`id(`ticket));
		continue;
	    }
            renew = UI::QueryWidget (`id(`renew), `Value);
	    if (!regexpmatch (renew, "^([0-9]+)[dmh]$") &&
		!regexpmatch (renew, "^([0-9]+)$"))
	    {
		Popup::Error (_("Invalid format of Ticket Lifetime entry.
Try again."));
		UI::SetFocus (`id(`renew));
		continue;
	    }
        }

    } while (!contains ([`back, `next, `cancel, `abort], result));

    if (result == `next)
    {
        Kerberos::minimum_uid = sformat("%1",UI::QueryWidget(`id(`uid),`Value));
	Kerberos::ticket_lifetime = ticket;
	Kerberos::renew_lifetime = renew;
	Kerberos::forwardable = UI::QueryWidget (`id(`forw), `Value) ?
	    "true" : "false";
	Kerberos::proxiable = UI::QueryWidget (`id(`prox), `Value) ?
	    "true" : "false";
	Kerberos::retain_after_close = UI::QueryWidget (`id(`retain), `Value) ?
	    "true" : "false";
	// TODO check for openssh package?
	Kerberos::ssh_support = UI::QueryWidget (`id(`ssh), `Value);
    }
    return result;
}


global define symbol AFSSettingsPopup () ``{

    // help text 1/3
    /* FIXME remove
    string help_text = _("<p><b>AFS Settings</b></p>") +

    _("<p><b>Cell Name</b><br>
The name of cell</p>") +

    _("<p><b>AFS Server</b><br>
AFS server for this cell</p>");
    */

    string cell		= Kerberos::afs_cell;
    string afs_server	= Kerberos::afs_server;

    UI::OpenDialog( `opt(`decorated), `HBox(
	`HSpacing(1),
	`VBox(
	    // textentry label
	    `TextEntry (`id(`cell), _("&AFS Cell Name"), cell),
	    // textentry label
	    `TextEntry (`id(`server), _("AFS &Server"), afs_server),
	    `HBox (
		`PushButton(`id(`ok),`opt(`key_F10,`default),Label::OKButton()),
		`PushButton(`id(`cancel),`opt (`key_F9), Label::CancelButton())
//		`PushButton(`id(`help),`opt (`key_F2), Label::HelpButton())
	    )
	),
	`HSpacing(1)
    ));

    symbol ret = UI::UserInput();
    /*
    do
    {
	ret = UI::UserInput();
	if (ret == `help)
	    Wizard::ShowHelp( help_text );

    } while (!contains ([`back, `ok, `cancel, `abort], ret));
    */

    if (ret == `ok)
    {
	cell		= UI::QueryWidget (`id(`cell), `Value);
	afs_server	= UI::QueryWidget (`id(`server), `Value);
	if (cell != Kerberos::afs_cell || afs_server != Kerberos::afs_server)
	{
	    Kerberos::afs_cell		= cell;
	    Kerberos::afs_server	= afs_server;
	    Kerberos::afs_modified	= true;
	    Kerberos::modified		= true;
	}
    }

    UI::CloseDialog();

    return ret;
}


/* EOF */
}
