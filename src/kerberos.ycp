/**
 * File:	clients/kerberos-client.ycp
 * Package:	Configuration of kerberos-client
 * Summary:	Main file
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * Main file for kerberos-client configuration. Uses all other files.
 */

{

/***
 * <h3>Configuration of the kerberos-client</h3>
 */

textdomain "kerberos";

/* The main () */
y2milestone ("----------------------------------------");
y2milestone ("Kerberos-client module started");

import "Kerberos";
import "Wizard";
//include "kerberos-client/wizards.ycp";

/* is this proposal or not? */
boolean propose = false;
list args = WFM::Args();
if(size(args) > 0) {
    if(is(WFM::Args(0), path) && WFM::Args(0) == .propose) {
        y2milestone("Using PROPOSE mode");
        propose = true;
    }
    else
        y2error("Bad argument for kerberos-client: %1", WFM::Args(0));
}

/* main ui function */
any ret = nil;

/*
if(propose) ret = Kerberos-clientAutoSequence();
else ret = Kerberos-clientSequence();
*/

/**
 * The only dialog
 * @return  `back or `next
 */
global define symbol KerberosDialog () ``{

    // help text
    string help_text = _("<p>
<b>Autentication with Kerberos</b><br>
You can update your PAM settings to enable the Kerberos autentication for your users. 
</p>")+

_("<p><b>Authentication modes</b><br>
If you choose <b>optional</b> mode, the primary authentication is with the existing framework, such as user entries in the <i>/etc/shadow</i> or NIS/LDAP database. The only difference is that, in addition, if there is a Kerberos principal associated with the user, PAM module will try to obtain a ticket on behalf of the user, using the previously suplied password.
<br>
Otherwise, when you want to use Kerberos PAM module as a primary authentication mechanism, select <b>sufficient</b>. When user fails to log in (because there is no such principal in Kerberos database or the KDC is down), the system will try to authenticate the user with the entered password against the remaining defined database (local files, NIS, LDAP). 
</p>");

    help_text = help_text + _("<p>
<b>Setting the Kerberos client</b><br>
This is just a simple confiuration of your client. Please enter your <b>default realm</b> and the <b>host name</b> or <b>adress</b> of your Key Distribution Center (KDC)");

    boolean use_pam_krb = Kerberos::use_pam_krb;
    string default_realm = Kerberos::default_realm;
    string kdc = Kerberos::kdc;
    string control = Kerberos::control;
//    string arguments = Kerberos::argumets;

    list controls = [
        `item (`id ("optional"), "optional", false),
        `item (`id ("sufficient"), "sufficient", false)
    ];

    term con = `HVSquash(
        `VBox (
        `VSpacing(1),
        // frame label
        `Frame (_("PAM login"),
            `VBox (
                `VSpacing (0.5),
                `RadioButtonGroup(`id(`rd),
                    `Left(`HVSquash(`VBox (
                        // radio button label
                        `Left (`RadioButton(`id(`pamno), `opt (`notify), _("Do &not use Kerberos"), !use_pam_krb)),
                        // radio button label
                        `Left(`RadioButton(`id(`pamyes), `opt (`notify), _("&Use Kerberos"), use_pam_krb)))))),
                // text entry label
                `ComboBox (`id (`auth_control), `opt(`hstretch),
                    _("&Authentication mode"), controls),
                `VSpacing (0.5))
        ),
        `VSpacing(1),
        // frame label
        `Frame (_("Kerberos client settings"),
            `VBox (
                `VSpacing (0.5),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`realm), _("Default &realm"),
                         default_realm)),
                `HSquash(
                    // textentry label
                    `TextEntry (`id (`kdc), _("&KDC server adress"), kdc)),
                `VSpacing (0.5)
            )
        ),
        `VSpacing(1)
    ));

    Wizard::SetContentsButtons (
        // dialog title
        _("Kerberos Client Configuration"), con, help_text,
        UI::BackButtonLabel (), UI::FinishButtonLabel ());

    UI::ChangeWidget (`id (`auth_control), `Enabled, use_pam_krb);

    if (control != "")
        UI::ChangeWidget (`id(`auth_control), `Value, control);

    any result = nil;
    do
    {
        result = UI::UserInput ();

        if (result == `pamyes || result == `pamno) {
            use_pam_krb = (result == `pamyes);
            UI::ChangeWidget (`id (`auth_control), `Enabled, use_pam_krb);
        }

        default_realm = UI::QueryWidget (`id(`realm), `Value);
        kdc = UI::QueryWidget (`id(`kdc), `Value);
        control = UI::QueryWidget (`id (`auth_control), `Value);

        if (result == `next && use_pam_krb) {

            if (default_realm == "")
            {
               // error popup label
               Report::Error(_("Enter the default realm name."));
               result = nil;
               continue;
            }

           if (kdc == "")
            {
                // error popup label
                Report::Error(_("Enter the address of KDC server."));
                result = nil;
                continue;
            }
        }

    } while (result != `back && result != `next && result != `cancel);

    if (result == `next)
    {
        if (use_pam_krb != Kerberos::use_pam_krb ||
            control != Kerberos::control)
        {
            Kerberos::use_pam_krb = use_pam_krb;
            Kerberos::control = control;
            Kerberos::pam_modified = true;
        }
        Kerberos::default_realm = default_realm;
        Kerberos::kdc = kdc;
    }

    return result;
}


// -- main

Wizard::CreateDialog ();
Wizard::ReplaceAbortButton(`Empty ());

Kerberos::Read ();

symbol result = KerberosDialog ();

if (result == `next)
{
    if (Kerberos::Write (false))
        UI::MessagePopup(_("The configuration of the Kerberos client
was saved and can be used."));
}

UI::CloseDialog();

y2debug("ret == %1", result);

/* Finish */
y2milestone("Kerberos-client module finished");
y2milestone("----------------------------------------");
return result;

/* EOF */
}
